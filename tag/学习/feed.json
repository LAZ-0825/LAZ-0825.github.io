{
    "version": "https://jsonfeed.org/version/1",
    "title": "LAZ的小站 • All posts by \"学习\" tag",
    "description": "",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/passages/C%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "url": "http://example.com/passages/C%E8%AF%AD%E8%A8%80%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/",
            "title": "C语言快速入门",
            "date_published": "2021-10-09T04:31:29.000Z",
            "content_html": "<h1 id=\"序言\"><a class=\"markdownIt-Anchor\" href=\"#序言\">#</a> 序言</h1>\n<p>​        C 语言是一种面向过程的计算机编程语言，多用于嵌入式开发（电路硬件编程）与系统底层编写， 比如我们常用的 Linux 系统，Windows 系统就是主要由 C 语言编写的。同时 c 语言也是最早出现的编程语 言之一，最早在 1972 年就已经被使用，并且直到现在它也是使用率最多的编程语言之一。</p>\n<h2 id=\"计算机的内存\"><a class=\"markdownIt-Anchor\" href=\"#计算机的内存\">#</a> 计算机的内存</h2>\n<p>代码本身存储在计算机的硬盘里，不管计算机开机还是关机，你写的程序的代码都是存在的，但是 一个程序要想运行起来就需要运行在计算机的内存里。</p>\n<p>可以将计算机的内存想象成一个大的空间，这个空间中有各种各样的程序在运行着，并且每个程序 都会占用一定的空间，而所占空间的大小由程序本身所有的一些变量，函数等决定。</p>\n<h2 id=\"什么是编译器\"><a class=\"markdownIt-Anchor\" href=\"#什么是编译器\">#</a> 什么是编译器</h2>\n<p>我们的计算机只能够识别由 0 和 1 的二进制码，因此我们写出来的代码要想运行起来必须经过软件的 编译，将英文的编程语句转换为电脑能够识别的二进制码，不论哪种编程语言，最终都会经过编译转换 为计算机可识别的二进制码。** 将代码转换为二进制机器码的过程就叫做编译，负责进行转换的程序叫做 编译器。** 例如 gcc 编译器 等</p>\n<h2 id=\"ide集成开发环境是什么\"><a class=\"markdownIt-Anchor\" href=\"#ide集成开发环境是什么\">#</a> IDE (集成开发环境) 是什么</h2>\n<p>​        IDE 是 Intergreated Development Environment 的缩写，中文称为集成开发环境，是指辅助程序 员开发的应用软件。</p>\n<p>​        我们已经知道，想要运行一个 C 语言程序必须有编译器，但是在实际开发过程中，除运行程序必须 的编译器之外，我们往往还需要很多其他的辅助工具，比如 语言编辑器、自动建立工具、除错器等等 。这些被打包在一起成为一个开发软件， 统一发布和安装，统称为集成开发环境（IDE）。比如我们使 用的 VS2010，devc++，CLion 等都是 IDE。</p>\n<p><strong>IDE 与编译器的区别</strong></p>\n<p>​       IDE 是编译器与其它各种开发工具的集合体。</p>\n<p><strong>面向过程思想</strong></p>\n<p>​\t\t面向过程是一种以过程为中心的编程思想，其原理就是将问题分解成一个一个详细的步骤，然后通 过函数实现每一个步骤，并依次调用。 面向过程我们所关心的是解决一个问题的步骤，举个例子，汽车发动、汽车熄火，这是两个不同 的事件，对于面向过程而言，我们关心的是事件本身，因此我们会使用两个函数完成以上两个动作，然 后依次调用即可。</p>\n<p>​\t\t再比如 进入游戏，开始游戏，游戏结算，这是三个不同的事件，我们在玩游戏时只会关注这三个事 件，我们可以使用函数来表示这三个不同的动作，依次调用。</p>\n<p>计算机基本快捷键的使用</p>\n<ol>\n<li>ctrl + 空格 /ctrl+shift : 快速切换中英文输入法</li>\n<li>Ctrl-X：剪切所选项并拷贝到剪贴板。</li>\n<li>Ctrl-C：将所选项拷贝到剪贴板。</li>\n<li>Ctrl-V：将剪贴板的内容粘贴到当前文稿或应用中。</li>\n<li>Ctrl-Z：撤销上一个命令。</li>\n<li>Ctrl-A：全选各项。</li>\n<li>Ctrl-S: 保存当前文件</li>\n<li>Ctrl-F：查找文稿中的项目或打开 “查找” 窗口。</li>\n<li>win+R: 唤起 “运行” 对话框，快速运行特定程序</li>\n<li>win+X: 唤起系统菜单</li>\n</ol>\n<h2 id=\"第一个程序hello-world\"><a class=\"markdownIt-Anchor\" href=\"#第一个程序hello-world\">#</a> 第一个程序（Hello World!)</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 我的第一个 C 程序 */</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello, World! \\n&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"程序解析\"><a class=\"markdownIt-Anchor\" href=\"#程序解析\">#</a> 程序解析</h2>\n<p>一个最基础的 C 语言程序由 <strong>预处理器指令，函数，变量，语句和表达式 以及 注释</strong>组成</p>\n<p>接下来我们讲解一下上面这段程序：</p>\n<ol>\n<li>程序的第一行 <strong>#include</strong> 是预处理器指令，告诉 C 编译器在实际编译之前要包含<strong> stdio.h</strong> 文 件，可以将头文件理解为一个工具箱，在我们开始工作前，需要先拿好工具箱才能开始我们的 工作。</li>\n<li>下一行<strong> int main ()</strong> 是主函数，程序从这里开始执行。</li>\n<li>下一行 <strong>/<em>…</em>/</strong> 将会被编译器忽略，不会执行，这里放置程序的注释内容。它们用来告诉读者 这个程序或者这些代码要做什么。</li>\n<li>下一行 **printf (…)** 是 C 中另一个可用的函数，会在屏幕上显示消息 “Hello, World!”。</li>\n<li>下一行 <strong>return 0;</strong> 终止 main () 函数，并返回值 0，表示程序完整地结束。</li>\n</ol>\n<h1 id=\"基本语法\"><a class=\"markdownIt-Anchor\" href=\"#基本语法\">#</a> 基本语法</h1>\n<p>​\t\t分号：在 c 语言中，每个语句之后必须跟一个 <strong>英文分号</strong>表示一个语句的结束</p>\n<p>​\t\t注释：C 语言有两种注释方式，分别是 <strong>//<strong> 和</strong>上文那种</strong>，// 是单行注释，只会将一行标注为注释，而<strong>上文那种</strong>是多行注释。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 单行注释 //</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">多行注释</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>标识符:</strong></p>\n<p>​\t\tC 标识符内不允许出现标点字符，比如 @、$ 和 %。C 语言是<strong>区分大小写</strong>的编程语言。因此，在 C 中， Manpower 和 manpower 是两个不同的标识符。</p>\n<h1 id=\"数据类型\"><a class=\"markdownIt-Anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"基本类型\"><a class=\"markdownIt-Anchor\" href=\"#基本类型\">#</a> 基本类型</h2>\n<h3 id=\"int整型\"><a class=\"markdownIt-Anchor\" href=\"#int整型\">#</a> <strong>int（整型）</strong></h3>\n<p>​\t\t可以用来声明一个整数变量</p>\n<h3 id=\"short短字节类型\"><a class=\"markdownIt-Anchor\" href=\"#short短字节类型\">#</a> <strong>short（短字节类型）</strong></h3>\n<p>​\t\t可以用来声明短整形（节约内存）</p>\n<h3 id=\"long-int长字节类型\"><a class=\"markdownIt-Anchor\" href=\"#long-int长字节类型\">#</a> <strong>long int（长字节类型）</strong></h3>\n<p>​\t\t当数据的大小超出 int 类型的上限时，可以使用 long int 甚至是 long long int 来扩大取值范围</p>\n<h3 id=\"double和float浮点类型\"><a class=\"markdownIt-Anchor\" href=\"#double和float浮点类型\">#</a> <strong>double 和 float（浮点类型）</strong></h3>\n<p>​\t\tdouble 和 float 用来表示浮点数（小数）</p>\n<p>​\t\t区别：</p>\n<p>​\t\t double 可以存储到小数点后 15 位，float 可以存储到小数点后 6 位</p>\n<h3 id=\"char字符类型\"><a class=\"markdownIt-Anchor\" href=\"#char字符类型\">#</a> <strong>char（字符类型）</strong></h3>\n<p>​\t\tchar 是最小的基本类型，只占 1 个字节的存储空间，主要用来表示字符，例如‘a’,‘b’,‘c’,‘d’等。</p>\n<p>​\t\t 值得注意的是，<strong>char 类型的‘1’和 int 类型的 1 是不一样的</strong>，在实际编写代码时需要注意。</p>\n<h3 id=\"unsigned无符号修饰符\"><a class=\"markdownIt-Anchor\" href=\"#unsigned无符号修饰符\">#</a> <strong>unsigned（无符号）修饰符</strong></h3>\n<p>​\t\tunsigned 可以用来修饰前面的数据类型，例如 unsigned int,unsigned char,unsigned double 等， 被 unsigned 修饰的数据类型其所占的存储空间大小不变，但是最大值会扩大为原来的 2 倍，最小值变为 0. 也就是说，一个数据类型被 unsigned 修饰以后，这个数据类型将变为无符号类型，也就是其不再有负 数值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> age = <span class=\"number\">20201022</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> year = <span class=\"number\">2020</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">short</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">short</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"keyword\">int</span> num = <span class=\"number\">1234567890</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> weight = <span class=\"number\">188.5326</span>;</span><br><span class=\"line\"><span class=\"keyword\">float</span> high = <span class=\"number\">100.25</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">short</span> <span class=\"keyword\">int</span> a=<span class=\"number\">32767</span>,b=a+<span class=\"number\">1</span>;<span class=\"comment\">//定义短整型无符号</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%u\\nb=%u\\n&quot;</span>,a,b);<span class=\"comment\">//以无符号输出</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>相对于 unsigned，还有一个 signed 修饰符，signed 是有符号修饰符，但是我们一般省略他，c 语 言默认的数据类型都是有符号的</strong></p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>储存空间大小</th>\n<th>最小值</th>\n<th>最大值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>char</td>\n<td>（与 signed char 或 unsigned char 相同）</td>\n<td>（与 signed char 或 unsigned char 相同）</td>\n<td>（与 signed char 或 unsigned char 相同）</td>\n</tr>\n<tr>\n<td>unsigned char</td>\n<td>1 个字节</td>\n<td>0</td>\n<td>255</td>\n</tr>\n<tr>\n<td>signed char</td>\n<td>1 个字节</td>\n<td>-128</td>\n<td>127</td>\n</tr>\n<tr>\n<td>int</td>\n<td>2 个或 4 个字节</td>\n<td>-32 768 或 -2 147 483 684</td>\n<td>32 768 或 2 147 483 684</td>\n</tr>\n<tr>\n<td>unsigned int</td>\n<td>2 个或 4 个字节</td>\n<td>0</td>\n<td>65 535 或 4 294 967 295</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2 个字节</td>\n<td>-32 768</td>\n<td>32 767</td>\n</tr>\n<tr>\n<td>unsigned short</td>\n<td>2 个字节</td>\n<td>0</td>\n<td>65 535</td>\n</tr>\n<tr>\n<td>long</td>\n<td>4 个字节</td>\n<td>-2 147 483 648</td>\n<td>2 147 483 647</td>\n</tr>\n<tr>\n<td>unsigned long</td>\n<td>4 个字节</td>\n<td>0</td>\n<td>4 294 967 295</td>\n</tr>\n<tr>\n<td>long long（C99）</td>\n<td>8 个字节</td>\n<td>-9 223 372 036 854 755 808</td>\n<td>9 223 372 036 854 755 808</td>\n</tr>\n<tr>\n<td>unsigned long long（C99）</td>\n<td>8 个字节</td>\n<td>0</td>\n<td>18 446 744 073 709 551 615</td>\n</tr>\n</tbody>\n</table>\n<p>​\t\t<strong>注：int 类型在 16 位系统中占 2 个字节，在 32 和 64 位系统中占 4 个字节</strong></p>\n<h2 id=\"基本类型转换\"><a class=\"markdownIt-Anchor\" href=\"#基本类型转换\">#</a> 基本类型转换</h2>\n<h4 id=\"1自动类型转换\"><a class=\"markdownIt-Anchor\" href=\"#1自动类型转换\">#</a> 1. 自动类型转换</h4>\n<p>当两个不同类型的变量进行运算时，编译器会自动进行类型转换，自动类型转换遵从以下规则：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/95b6bbcb25e8bb2f.png\" alt=\"\"></p>\n<p>例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> b = <span class=\"number\">1.2</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> c = a+b;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>,c);</span><br></pre></td></tr></table></figure>\n<p>​\t\t在执行 a+b 运算的时候编译器会先把 int 类型的 a 转为 double 类型，然后再和 b 进行运算</p>\n<h4 id=\"2强制类型转换\"><a class=\"markdownIt-Anchor\" href=\"#2强制类型转换\">#</a> 2. 强制类型转换</h4>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> a = <span class=\"number\">3.641593</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,(<span class=\"keyword\">int</span>)a ); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lf\\n&quot;</span>,a );<span class=\"comment\">// 3.641593</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><strong>注：在进行由高到低的强制类型转换时，数据会有部分丢失</strong></p>\n<p><strong>强制类型转换是临时的，不会修改变量本来的类型</strong></p>\n</blockquote>\n<h2 id=\"基本类型书写\"><a class=\"markdownIt-Anchor\" href=\"#基本类型书写\">#</a> 基本类型书写</h2>\n<p><strong>整数</strong></p>\n<ul>\n<li>\n<p>默认为 10 进制 ，10 ，20。</p>\n</li>\n<li>\n<p>以 0 开头为 8 进制，012，024。</p>\n</li>\n<li>\n<p>以 0b 开头为 2 进制，0b1010, 0b10100。</p>\n</li>\n<li>\n<p>以 0x 开头为 16 进制，0xa，0x14。</p>\n</li>\n</ul>\n<p><strong>小数</strong></p>\n<p>单精度常量（float）：2.3f 。</p>\n<p>双精度常量（double）：2.3，默认为双精度。</p>\n<p><strong>字符型常量</strong></p>\n<p>用英文单引号括起来，只保存一个字符，‘a’、‘b’ 、’*’ ，还有转义字符 ‘\\n’ 、’\\t’。</p>\n<p><strong>字符串常量</strong></p>\n<p>用英文的双引号引起来 可以保存多个字符：“abc”。</p>\n<h2 id=\"变量\"><a class=\"markdownIt-Anchor\" href=\"#变量\">#</a> 变量</h2>\n<p>​\t\t变量其实只不过是程序可操作的存储区的名称。C 中每个变量都有特定的类型，类型决定了变量存 储的大小和布局，该范围内的值都可以存储在内存中，运算符可应用于变量上。 例如</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> age = <span class=\"number\">5</span>;</span><br></pre></td></tr></table></figure>\n<p>​\t\t这里的 age 就是一个变量，变量 age 的值为 5，而”age“叫做变量名。</p>\n<p>​\t\t同一类型的多个变量的声明之间可以用逗号隔开</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> i, j, k;</span><br><span class=\"line\"><span class=\"comment\">//声明并定义了变量 i、j 和 k，</span></span><br><span class=\"line\"><span class=\"comment\">//这指示编译器创建类型为 int 的名为 i、j、k 的变量。下面同理</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c, ch;</span><br><span class=\"line\"><span class=\"keyword\">float</span> f, salary;</span><br><span class=\"line\"><span class=\"keyword\">double</span> d;</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量的输入和输出\"><a class=\"markdownIt-Anchor\" href=\"#变量的输入和输出\">#</a> 变量的输入和输出</h3>\n<p>1.scanf</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输入char变量：</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%c&quot;</span>,&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入int变量：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输入double/float变量：</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lf&quot;</span>,&amp;a);</span><br><span class=\"line\"><span class=\"keyword\">float</span> a;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%f&quot;</span>,&amp;a);</span><br></pre></td></tr></table></figure>\n<p>2.printf</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 输出char变量：</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a = <span class=\"string\">&#x27;c&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>,a); <span class=\"comment\">// c</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出int变量：</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">50</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a); <span class=\"comment\">// 50</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出double/float变量：</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> a = <span class=\"number\">3.14</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%f&quot;</span>,a); <span class=\"comment\">// 3.140000 默认保留六位小数</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.2f&quot;</span>,a);<span class=\"comment\">// 3.14</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.1f&quot;</span>,a);<span class=\"comment\">// 3.1</span></span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th><strong>符号</strong></th>\n<th><strong>类型</strong></th>\n<th><strong>说明</strong></th>\n<th><strong>示例</strong></th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>x</td>\n<td>unsigned int</td>\n<td>以十六进制小写输出</td>\n<td>printf(&quot;%x&quot;,11);</td>\n<td>b</td>\n</tr>\n<tr>\n<td>X</td>\n<td>unsigned int</td>\n<td>以十六进制大写输出</td>\n<td>printf(&quot;%X&quot;,11);</td>\n<td>B</td>\n</tr>\n<tr>\n<td>o</td>\n<td>unsigned int</td>\n<td>以八进制无符号整 S 输出</td>\n<td>printf( &quot;%o”,100);</td>\n<td>144</td>\n</tr>\n<tr>\n<td>u</td>\n<td>unsigned int</td>\n<td>以无符号整型输出</td>\n<td>printf( “%u,%u”,100u,100);</td>\n<td>100,100</td>\n</tr>\n<tr>\n<td>d、i</td>\n<td>int</td>\n<td>以整型输出</td>\n<td>printf(&quot;%i,%d&quot;, 100,100);</td>\n<td>100,100</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"常量\"><a class=\"markdownIt-Anchor\" href=\"#常量\">#</a> 常量</h2>\n<p>​\t\t常量是固定值，在程序执行期间不会改变。</p>\n<p>​\t\t常量可以是任何的基本数据类型，比如 int,double,char</p>\n<h3 id=\"常量的定义\"><a class=\"markdownIt-Anchor\" href=\"#常量的定义\">#</a> 常量的定义：</h3>\n<ol>\n<li>\n<p>使用 <strong>#define</strong> 预处理器。</p>\n</li>\n<li>\n<p>使用 <strong>const</strong> 关键字。 <strong>被 const 和 define 修饰的变量不可变</strong></p>\n<p><strong>#define 预处理器</strong></p>\n<p>下面是使用 #define 预处理器定义常量的形式：</p>\n<p>注意：define 定义之后不需要加分号</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//模式：</span></span><br><span class=\"line\"><span class=\"comment\">//#define identifier value</span></span><br><span class=\"line\"><span class=\"comment\">//例子：</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> PI 3.1415926</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> R 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LENGTH 10</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> WIDTH 5</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NEWLINE <span class=\"meta-string\">&#x27;\\n&#x27;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">area = LENGTH * WIDTH;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value of area : %d\\n&quot;</span>, area);</span><br><span class=\"line\"><span class=\"keyword\">double</span> r_area;</span><br><span class=\"line\">r_area = PI * R * R;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value of double area:%lf\\n&quot;</span>, r_area);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, NEWLINE);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>const 关键字</strong></p>\n<p>​\t\t可以使用 const 前缀声明指定类型的常量，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> LENGTH = <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> WIDTH = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span> NEWLINE = <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> area;</span><br><span class=\"line\">area = LENGTH * WIDTH;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value of area : %d&quot;</span>, area);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%c&quot;</span>, NEWLINE);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"运算符\"><a class=\"markdownIt-Anchor\" href=\"#运算符\">#</a> 运算符</h1>\n<h2 id=\"算术运算符\"><a class=\"markdownIt-Anchor\" href=\"#算术运算符\">#</a> 算术运算符</h2>\n<ol>\n<li>\n<p>”+“运算符：把两个数相加</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a + b;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = 7</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>”-“运算符：把两个数相减</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a - b;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = -3</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>“*” 运算符：把两个数相乘</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a * b;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = 10</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>“/” 运算符：把两个数相除，左边是被除数，右边的是除数（右边的数不能为 0）：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a / b;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = 0</span></span><br><span class=\"line\"><span class=\"comment\">/*这里因为a，b，c都是int类型，a/b=0.4,所以会直接舍去后面的.4，只剩0*/</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> d = <span class=\"number\">2.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> e = <span class=\"number\">3.0</span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> f = e / d;</span><br><span class=\"line\"><span class=\"comment\">//double类型允许小数的存在，因此这里的f就是1.5了</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>注意：C 语言不会对计算结果进行四舍五入，会直接全部舍去，比如 3.9，转为 int 类型的时候 就会变成 3</p>\n</li>\n<li>\n<p>”%“：取余运算符，可以直接取整除之后的余数：</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = b % a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = 1</span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>”++“运算符：自增运算符，让变量的值加 1：</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c = a++;<span class=\"comment\">//也可以写成 c = ++a;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,c); <span class=\"comment\">// c = </span></span><br></pre></td></tr></table></figure>\n<p><strong>a<ins> 与</ins> a 的区别:</strong></p>\n<p>​\t\t在进行 a++ 运算时，程序会先对 a 复制一次，然后让其 + 1，执行的操作类似 a = a + 1</p>\n<p>​\t\t在进行 ++a 运算时，程序会直接让 a+1</p>\n<ol start=\"7\">\n<li>\n<p>“–” 运算符：自减运算符，让变量的值 - 1：</p>\n<p>​\t与 ++ 运算符同理，a–运算会对 a 先复制一次，再让其 - 1，–a 会直接让其 - 1</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,--a);<span class=\"comment\">//输出0</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,b--);<span class=\"comment\">//输出1</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,b);<span class=\"comment\">//输出0</span></span><br></pre></td></tr></table></figure>\n<p><strong>关系运算符</strong></p>\n<ol>\n<li>== 运算符：</li>\n</ol>\n<p>在 c 语言中 ” = “表示的是对一个变量进行赋值，而要想判断两个变量的值是否相同所用到的 是” == “运算符，该运算符返回的是一个真假值（在 c 语言中 1 表示真值，0 表示假值）。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a == b);<span class=\"comment\">// 1</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a == b); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>!= 运算符:</li>\n</ol>\n<p>这个运算符表示两个变量是否不同，返回值为真假值：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a != b);<span class=\"comment\">// 0</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a != b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>&gt; 运算符：</li>\n</ol>\n<p>判断运算符左边的变量是否大于右边的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &gt; b);<span class=\"comment\">// 0</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &gt; b); <span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>&lt; 运算符：</li>\n</ol>\n<p>判断运算符左边的变量是否小于右边的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">4</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &lt; b);<span class=\"comment\">// 1</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &lt; b); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>&gt;= 运算符：</li>\n</ol>\n<p>判断运算符左边的变量是否大于等于右边的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">5</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &gt;= b);<span class=\"comment\">// 1</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &gt;= b); <span class=\"comment\">// 1 </span></span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>&lt;= 运算符：</li>\n</ol>\n<p>判断运算符左边的变量是否小于等于右边的变量：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">4</span>,b = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &lt; b);<span class=\"comment\">// 1</span></span><br><span class=\"line\">a = <span class=\"number\">6</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a &lt; b); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"逻辑运算符\"><a class=\"markdownIt-Anchor\" href=\"#逻辑运算符\">#</a> 逻辑运算符</h2>\n<ol>\n<li>&amp;&amp; 运算符： 表示 “且”，如果左右两个操作全部为真，则该表达式返回真</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>,b = <span class=\"number\">3</span>;</span><br><span class=\"line\">(a &lt; b &amp;&amp; a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br><span class=\"line\">(a &lt; b &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br><span class=\"line\">(a &lt; b &amp;&amp; a == <span class=\"number\">3</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br><span class=\"line\">(a &gt; b &amp;&amp; a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>|| 运算符： 表示 “或”，左右两个操作有一个为真，则该表达式为真</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>,b = <span class=\"number\">3</span>;</span><br><span class=\"line\">(a &lt; b || a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br><span class=\"line\">(a &lt; b || a == <span class=\"number\">3</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br><span class=\"line\">(a &gt; b || a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br><span class=\"line\">(a &gt; b || a == <span class=\"number\">3</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>! 运算符： 表示 “非”，如果修饰的条件表达式为真，则该表达式为假，反之为真。</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">2</span>,b = <span class=\"number\">3</span>;</span><br><span class=\"line\">(a &lt; b || a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br><span class=\"line\">!(a &lt; b || a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br><span class=\"line\">(a &gt; b &amp;&amp; a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 0</span></span><br><span class=\"line\">!(a &gt; b &amp;&amp; a == <span class=\"number\">2</span>) <span class=\"comment\">// 这个表达式为 1</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"赋值运算符\"><a class=\"markdownIt-Anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h2>\n<table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th>描述</th>\n<th>实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>=</td>\n<td>简单的赋值运算符，把右边操作数的值赋给左边操作数</td>\n<td>C = A + B 将把 A + B 的 值赋给 C</td>\n</tr>\n<tr>\n<td>+=</td>\n<td>加且赋值运算符，把右边操作数加上左边操作数的结果赋 值给左边操作数</td>\n<td>C += A 相当于 C = C + A</td>\n</tr>\n<tr>\n<td>-=</td>\n<td>减且赋值运算符，把左边操作数减去右边操作数的结果赋 值给左边操作数</td>\n<td>C -= A 相当于 C = C - A</td>\n</tr>\n<tr>\n<td>*=</td>\n<td>乘且赋值运算符，把右边操作数乘以左边操作数的结果赋 值给左边操作数</td>\n<td>C *= A 相当于 C = C * A</td>\n</tr>\n<tr>\n<td>/=</td>\n<td>除且赋值运算符，把左边操作数除以右边操作数的结果赋 值给左边操作数</td>\n<td>C /= A 相当于 C = C / A</td>\n</tr>\n<tr>\n<td>%=</td>\n<td>求模且赋值运算符，求两个操作数的模赋值给左边操作数</td>\n<td>C %= A 相当于 C = C % A</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">a += <span class=\"number\">3</span>; <span class=\"comment\">// a = a + 3</span></span><br><span class=\"line\">a -= <span class=\"number\">3</span>; <span class=\"comment\">// a = a - 3</span></span><br><span class=\"line\">a *= <span class=\"number\">3</span>; <span class=\"comment\">// a = a * 3</span></span><br><span class=\"line\">a /= <span class=\"number\">3</span>; <span class=\"comment\">// a = a / 3</span></span><br><span class=\"line\">a %= <span class=\"number\">3</span>; <span class=\"comment\">// a = a % 3</span></span><br><span class=\"line\">a = <span class=\"number\">3</span>; <span class=\"comment\">// a = 3</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"判断语句\"><a class=\"markdownIt-Anchor\" href=\"#判断语句\">#</a> 判断语句</h1>\n<p><img src=\"https://static.runoob.com/wp-content/uploads/c/C-decision-20200923-1.svg\" alt=\"\"></p>\n<p>​\t\t判断结构要求程序员指定一个或多个要评估或测试的条件，以及条件为真时要执行的语句（必需 的）和条件为假时要执行的语句（可选的）。</p>\n<h2 id=\"if-语句\"><a class=\"markdownIt-Anchor\" href=\"#if-语句\">#</a> if 语句</h2>\n<p>​\t模式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(条件语句)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">//执行语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a = b!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t一个 if 语句由一个条件语句后跟一个或多个语句组成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (a == b &amp;&amp; a &gt; <span class=\"number\">0</span> &amp;&amp; b &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a = b!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"else语句\"><a class=\"markdownIt-Anchor\" href=\"#else语句\">#</a> else 语句</h2>\n<p>​\t当条件不满足 if 中的条件语句时会跳入 else 语句执行</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式/条件语句)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 如果布尔表达式为真将执行的语句 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 如果布尔表达式为假将执行的语句 */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://static.runoob.com/wp-content/uploads/c/c-if-else-20200923.svg\" alt=\"\"></p>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>,b = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &lt; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&lt;b!&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&gt;=b!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"else-if-语句\"><a class=\"markdownIt-Anchor\" href=\"#else-if-语句\">#</a> else if 语句</h2>\n<p>​\t\t当需要进行多次判断时，可以使用 else if 语句</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">1</span>/条件语句<span class=\"number\">1</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 如果布尔表达式1为真将执行的语句 */</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式<span class=\"number\">2</span>/条件语句<span class=\"number\">2</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/* 如果布尔表达式1为假,布尔表达式2为真将执行的语句 */</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"comment\">/*如果两个布尔表达式都为假要执行的语句*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">3</span>,b = <span class=\"number\">4</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &lt; b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&lt;b!&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a == b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=b!&quot;</span>);</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a&gt;b!&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"switch-case-语句\"><a class=\"markdownIt-Anchor\" href=\"#switch-case-语句\">#</a> switch case 语句</h2>\n<p>​\t\t如果需要判断的语句很多的时候，if else 未免显得非常繁琐，因此我们可以使用效率更高，更加精 简的 switch case 语句。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(变量)&#123;<span class=\"keyword\">case</span> 值<span class=\"number\">1</span> :statement(s);<span class=\"comment\">//执行语句break; /* 可选的 */case 值2 :statement(s);//执行语句break; /* 可选的 *//* 可以有任意数量的 case 语句 */default : /* 可选的 如果匹配不成功就会跳到这个标签下面去执行这个标签下面的语句*/statement(s);&#125;</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> x = <span class=\"number\">5</span>;<span class=\"keyword\">switch</span>(x)&#123;<span class=\"keyword\">case</span> <span class=\"number\">0</span>:<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;x=0&quot;</span>);<span class=\"comment\">//执行语句break; /* 可选的 */case 5:printf(&quot;x=5&quot;);//执行语句break; /* 可选的 *//* 可以有任意数量的 case 语句 */default : /* 可选的 如果匹配不成功就会跳到这个标签下面去执行这个标签下面的语句*/printf(&quot;no pattern&quot;);&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>switch</strong> 语句必须遵循下面的规则：</p>\n<ul>\n<li>\n<p>switch 语句中 case 后面是一个常量（不能为浮点数） 在一个 switch 中可以有任意数量的 case 语句。</p>\n</li>\n<li>\n<p>case 后面的常量 必须与 switch 中的变量具有相同的数据类型。</p>\n</li>\n<li>\n<p>当被测试的变量等于 case 中的常量时，case 后跟的语句将被执行，直到遇到 break 语句为 止。</p>\n</li>\n<li>\n<p>当遇到 break 语句时，switch 终止，控制流将跳转到 switch 语句后的下一行。</p>\n</li>\n<li>\n<p>不是每一个 case 都需要包含 break。如果 case 语句不包含 break，控制流将会继续后续的 case，直到遇到 break 为止。</p>\n</li>\n<li>\n<p>一个 switch 语句可以有一个可选的 default，出现在 switch 的结尾。在上面所有的 case 都 不执行时执行。default 中的 break 语句不是必需的。</p>\n<p>​\t示例：</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">char</span> grade = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">switch</span>(grade)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;很棒！\\n&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;做得好\\n&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;您通过了\\n&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span> :</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;最好再试一下\\n&quot;</span> );</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span> :</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;无效的成绩\\n&quot;</span> );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;成绩是 %c\\n&quot;</span>, grade );</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"循环\"><a class=\"markdownIt-Anchor\" href=\"#循环\">#</a> 循环</h1>\n<p>​\t\t当我们需要重复执行同一块代码时，我们可以使用循环操作来减少代码量。</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2015/12/loop.png\" alt=\"\"></p>\n<h2 id=\"1while循环\"><a class=\"markdownIt-Anchor\" href=\"#1while循环\">#</a> 1.while 循环</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(条件语句)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (n &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d \\n&quot;</span>,n);</span><br><span class=\"line\">++n;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 依次打印出0--9</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/BFE13459-897C-41A5-AE94-D71B0CA50FB6.jpg\" alt=\"\"></p>\n<h2 id=\"2for循环\"><a class=\"markdownIt-Anchor\" href=\"#2for循环\">#</a> 2.for 循环</h2>\n<h2 id=\"\"><a class=\"markdownIt-Anchor\" href=\"#\">#</a> </h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> ( init; condition; increment )</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">statement(s);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> n = <span class=\"number\">0</span>; n &lt; <span class=\"number\">10</span>; ++n)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//依次打印出从0到9</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/69978E61-0BA5-4D66-A115-D3AD15B16F47.jpg\" alt=\"\"></p>\n<h2 id=\"3do\"><a class=\"markdownIt-Anchor\" href=\"#3do\">#</a> <a href=\"http://3.do\">3.do</a>…while 循环：</h2>\n<p>​\t\t不像 <strong>for</strong> 和 while 循环，它们是在循环头部测试循环条件。在 C 语言中，do…while 循环是 在循环的尾部检查它的条件。</p>\n<p>​\t\tdo…while 循环与 while 循环类似，但是 do…while 循环会确保至少执行一次循环。也就是 说，do…while 结构会先执行循环，后进行条件判断。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">statement(s);</span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>( condition );</span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> n = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,n);</span><br><span class=\"line\">++n;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span>(n &lt; <span class=\"number\">0</span>); <span class=\"comment\">// 输出 0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (n &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>,n);</span><br><span class=\"line\">++n;</span><br><span class=\"line\">&#125; <span class=\"comment\">// 无输出</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/09/B2FE1EC7-6477-439B-8F50-82D537673799.jpg\" alt=\"\"></p>\n<h1 id=\"函数\"><a class=\"markdownIt-Anchor\" href=\"#函数\">#</a> 函数</h1>\n<p>​\t\t函数是一组一起执行一个任务的语句。每个 C 程序都至少有一个函数，即主函数 main () ，所有简 单的程序都可以定义其他额外的函数。</p>\n<p>​\t\t定义方法：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">返回类型 函数名(参数)&#123;</span><br><span class=\"line\">函数体</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>** 返回类型：** 一个函数可以返回一个值。指函数返回的值的数据类型。有些函数执行所需的操作而不 返回值，在这种情况下，返回类型是 void。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">max</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(a &gt; b)&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print_a</span><span class=\"params\">(<span class=\"keyword\">int</span> a)</span></span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,a);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数声明\"><a class=\"markdownIt-Anchor\" href=\"#函数声明\">#</a> 函数声明</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include &lt;stdio.h&gt;</span><br><span class=\"line\">int max(int ,int );</span><br><span class=\"line\">void print_a(int );</span><br><span class=\"line\">int max(int a,int b)&#123;</span><br><span class=\"line\">if(a &gt; b)&#123;</span><br><span class=\"line\">return a;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">return b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void print_a(int a)&#123;</span><br><span class=\"line\">printf(&quot;%d&quot;,a);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">int n = 0,m = 5;</span><br><span class=\"line\">int num = max(n,m);</span><br><span class=\"line\">print_a(num);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组\"><a class=\"markdownIt-Anchor\" href=\"#数组\">#</a> 数组</h1>\n<p>​\t\t当我们需要声明或使用同一类型的多个变量时，一个个声明未免太过繁琐，我们可以使用数组来达 到这个目的。</p>\n<blockquote>\n<p>数组是一个 <strong>固定大小</strong> 的 <strong>相同类型元素</strong> 的 <strong>顺序集合</strong>。</p>\n</blockquote>\n<p>​\t\t声明方式：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">类型 数组名[数组大小];</span><br></pre></td></tr></table></figure>\n<p>​\t\t示例：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 声明一个大小为10的int类型数组,它可以存储10个int类型的元素</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> <span class=\"built_in\">array</span>[<span class=\"number\">10</span>]; <span class=\"comment\">// 声明一个大小为10的double类型数组，它可以存储10个double类型的元素</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化数组\"><a class=\"markdownIt-Anchor\" href=\"#初始化数组\">#</a> 初始化数组</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>注意： 大括号 {} 之间的值的数目不能大于我们在数组声明时在方括号 [] 中指定的元素数目。</strong></p>\n<p>​\t\t有时我们会开一个超级大的数组，这时使用大括号来进行初始化就非常麻烦了，因此我们结合之前 的循环操作来对数组进行初始化</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">5</span> ; i++)&#123;</span><br><span class=\"line\"><span class=\"built_in\">array</span>[i] = i+<span class=\"number\">100</span>; <span class=\"comment\">// 设置元素i的值为i+100</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>访问数组元素</strong></p>\n<p>​\t\t数组元素可以通过数组名称加索引进行访问。元素的索引是放在方括号内，跟在数组名称的后边。 例如：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> <span class=\"built_in\">array</span>[<span class=\"number\">5</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num = <span class=\"built_in\">array</span>[<span class=\"number\">0</span>]; <span class=\"comment\">// num = 0;</span></span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;num = %d\\n&quot;</span>,num);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">5</span>; j++ )<span class=\"comment\">//利用循环打印整个数组</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Array[%d] = %d\\n&quot;</span>, j, <span class=\"built_in\">array</span>[j] );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>注意：数组元素只被创建而没有被初始化的时候是不能进行正常访问的，只有数组中元素被赋值才 可以正常访问。</strong></p>\n<h1 id=\"指针\"><a class=\"markdownIt-Anchor\" href=\"#指针\">#</a> 指针</h1>\n<h2 id=\"使用指针\"><a class=\"markdownIt-Anchor\" href=\"#使用指针\">#</a> 使用指针</h2>\n<p>​\t\t想要在函数中完成变量的交换，不被形参所限制。</p>\n<p>​\t\t<strong>指针</strong>可以达成我们的目的。</p>\n<p>​\t\t在程序运行时，变量被创建时， 变量都会被分配到一个内存位置。</p>\n<p>​\t\t内存位置可以通过 **&amp; 运算符<strong>获取</strong>地址 **。</p>\n<p>​\t\t<strong>注意： 指针变量的类型必须要跟被取地址变量类型一致</strong></p>\n<h2 id=\"怎么理解指针\"><a class=\"markdownIt-Anchor\" href=\"#怎么理解指针\">#</a> 怎么理解指针</h2>\n<p>让我们把 *p ，拆分成两部分去理解。</p>\n<p><strong>’p’ 部分 ：是一个变量，能存储地址。</strong></p>\n<p><strong>’*’ 部分 ：获取变量 p 储存的地址，并找到该地址上存储的值。</strong></p>\n<p>​\t\t运行上面的代码，输出 *p 的值就是 var 的值。</p>\n<p>​\t\t** 注意：** 多数时候指针初始化置 <strong>NULL</strong> 很有必要。</p>\n<h2 id=\"指针基本运算\"><a class=\"markdownIt-Anchor\" href=\"#指针基本运算\">#</a> 指针基本运算</h2>\n<p>​\t\t指针就是地址，地址在内存中也是以数的形式存在，所以指针也能进行基本运算。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = &amp;a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,p);</span><br><span class=\"line\">p++;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,p);</span><br><span class=\"line\">p -= <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%p\\n&quot;</span>,p);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"指向一维数组的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向一维数组的指针\">#</a> 指向一维数组的指针</h2>\n<ul>\n<li>\n<p>数组中的每个数据都会保存在一个储存单元里面，只要是储存单元就会有地址，所以就可以用 指针保存数组储存单元的地址。</p>\n<p><em>为指针赋数组数据的地址</em></p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> *p = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">p = &amp;num[i];</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>,*p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>可以使用指针操作一维数组</strong></p>\n<ul>\n<li>第一种</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">5</span>]=&#123;<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = a;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,*p);</span><br><span class=\"line\">p++;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,*p);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第二种</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num[<span class=\"number\">5</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p;</span><br><span class=\"line\">p = &amp;num[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<h2 id=\"指向二维数组的指针\"><a class=\"markdownIt-Anchor\" href=\"#指向二维数组的指针\">#</a> 指向二维数组的指针</h2>\n<p>​\t\t跟一维数组相似</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> num[<span class=\"number\">3</span>][<span class=\"number\">2</span>] = &#123;&#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>&#125;,&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;,&#123;<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p = &amp;num[<span class=\"number\">0</span>][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n<ul>\n<li>注意： 不能为指针直接赋予二维数组的数组名，即上面的代码不能写成： int *p = num；</li>\n</ul>\n<h2 id=\"数组指针\"><a class=\"markdownIt-Anchor\" href=\"#数组指针\">#</a> 数组指针</h2>\n<p>​\t\t<strong>顾名思义：</strong> 指向数组的指针</p>\n<p>​\t\t如果一个指针指向了数组，就称它为数组指针。c</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">4</span>][<span class=\"number\">3</span>] = &#123;&#123;<span class=\"number\">0</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;,&#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>&#125;,&#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;,&#123;<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>&#125;&#125;;</span><br></pre></td></tr></table></figure>\n<p>​\t\t在概念上的矩阵是像这种矩阵的样子：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t但实际上它在内存中是链式存储的：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">1</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t定义一个数组指针</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> (*p)[<span class=\"number\">3</span>] = a;</span><br></pre></td></tr></table></figure>\n<p><strong>括号里面的 * 代表 p 是一个指针，[3] 代表这个 指针 p 指向了类型为 int [3] 的数组</strong></p>\n<ul>\n<li>\n<p>p 指向数组 a 的开头，就是指向数组的第 0 行元素，p + 1 指向数组的第一行元素</p>\n</li>\n<li>\n<p>所以 *(p+1) 就表示数组的第一行元素的值，有多个数据</p>\n</li>\n<li>\n<p>*(p+1) + 1 表示第一行的第一个数据的地址</p>\n</li>\n</ul>\n<h2 id=\"二级指针\"><a class=\"markdownIt-Anchor\" href=\"#二级指针\">#</a> 二级指针</h2>\n<p>​\t\t<strong>顾名思义：</strong> 指向指针的指针</p>\n<p>​\t\t假设有一个 int 类型的变量 a ， p1 是指向 a 的指针变量， p2 又是指向 p1 的指针变量。</p>\n<p>​\t\t用代码形式展现就是：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *p1 = &amp;a;</span><br><span class=\"line\"><span class=\"keyword\">int</span> **p2 = &amp;p1;</span><br></pre></td></tr></table></figure>\n<p>​\t\t指针变量也是一种变量，也会占用存储空间，也可以使用 &amp; 获取它的地址。C 语言不限制指针的级 数，每增加一级指针，在定义指针变量时就得增加一个星号。p1 是一级指针，指向普通类型的数据， 定义时有一个；p2 是二级指针，指向一级指针 p1，定义时有两个 *。</p>\n<p>​\t\t** 同理：** 指针可以有三级指针、四级指针等等。</p>\n<h2 id=\"指针在函数中的作用\"><a class=\"markdownIt-Anchor\" href=\"#指针在函数中的作用\">#</a> 指针在函数中的作用</h2>\n<p><strong>指针作为函数的参数</strong></p>\n<p>写一个函数并调用，实现交换变量的值</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp= a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">swap(a, b);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d\\nb=%d\\n&quot;</span>,a,b);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t运行上面的代码，<strong>a 和 b 的值并没有发生交换</strong></p>\n<h2 id=\"形参形式参数\"><a class=\"markdownIt-Anchor\" href=\"#形参形式参数\">#</a> 形参（形式参数）</h2>\n<p>​\t\t在函数定义中出现的参数，它没有数据，只能在函数被调用时接收传递进来的数据，所以称为<strong>形式参数</strong>。</p>\n<h2 id=\"实参实际参数\"><a class=\"markdownIt-Anchor\" href=\"#实参实际参数\">#</a> 实参（实际参数）</h2>\n<p>​\t\t函数被调用时给出的参数包含了实实在在的数据，会被函数内部的代码使用，所以称为<strong>实际参数</strong>。 形参和实参的功能是传递数据，发生函数调用时，实参的值会传递给形参。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> a,<span class=\"keyword\">int</span> b)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> temp= a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\">swap(a, b);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d\\nb=%d\\n&quot;</span>,a,b);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>main 函数</strong> 中调用的 <strong>swap 函数</strong> <strong>swap(a, b);</strong> 中的 a，b 是<strong>实参</strong>。</p>\n<p>​\t\t<strong>swap 函数</strong> 定义的 <strong>void swap(int a,int b)</strong> 中的 a，b 是<strong>形参。</strong></p>\n<p>​\t\t在 c 语言中实参和形参之间的数据传输是单向的 “值传递” 方式，也就是实参可以影响形参，而形参不 能影响实参。指针变量作为参数也不例外，但是可以改变实参指针变量所指向的变量的值。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确的变量交换代码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">swap</span><span class=\"params\">(<span class=\"keyword\">int</span> *a,<span class=\"keyword\">int</span> *b)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> *temp= a;</span><br><span class=\"line\">a = b;</span><br><span class=\"line\">b = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a = <span class=\"number\">0</span>, b = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a);</span><br><span class=\"line\">swap(&amp;a, &amp;b);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;a=%d\\nb=%d\\n&quot;</span>,a,b);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t上面代码在调用 scanf 或者 swap 函数的时候，传入变量时，变量前都使用了 &amp; 运算符</p>\n<p>​\t\t这两个函数通过传入的地址去改变了实参。</p>\n<h2 id=\"指针函数\"><a class=\"markdownIt-Anchor\" href=\"#指针函数\">#</a> 指针函数</h2>\n<p>​\t\tC 语言允许函数的返回值是一个指针（地址），我们将这样的函数称为指针函数。</p>\n<p>​\t\t下面的例子定义了一个函数 strlong () ，用来返回两个字符串中较长的一个：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> *<span class=\"title\">strlong</span><span class=\"params\">(<span class=\"keyword\">char</span> *str1, <span class=\"keyword\">char</span> *str2)</span></span>&#123;<span class=\"comment\">//返回类型是(char*)</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(<span class=\"built_in\">strlen</span>(str1) &gt;= <span class=\"built_in\">strlen</span>(str2))&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> str1;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> str2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str1[<span class=\"number\">30</span>], str2[<span class=\"number\">30</span>], *str;</span><br><span class=\"line\">gets(str1);</span><br><span class=\"line\">gets(str2);</span><br><span class=\"line\">str = strlong(str1, str2);</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Longer string: %s\\n&quot;</span>, str);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>注意：函数运行结束后会销毁在它内部定义的所有局部数据，包括局部变量、局部数组和形式参数。</strong></p>\n<h1 id=\"结构体\"><a class=\"markdownIt-Anchor\" href=\"#结构体\">#</a> 结构体</h1>\n<p>​\t\t如果我们想存储多个学生的信息，比如身高、体重、学习成绩，等等。</p>\n<p>​\t\t在学结构体前，我们可以使用多个数组，用相同下标去存储一个学生的所有信息。</p>\n<p>​\t\t或者使用很多的变量，去储存信息，上述实现方法显得相当麻烦。</p>\n<p>​\t\tC 语言向我们提供了一种数据类型 <strong>：结构体（struct）</strong>。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//结构体定义</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> height;</span><br><span class=\"line\"><span class=\"keyword\">double</span> weight;</span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> score;</span><br><span class=\"line\">&#125;student1;</span><br></pre></td></tr></table></figure>\n<p>​\t\t这是一个结构体的定义，拆分看。</p>\n<p>​\t\t<strong>struct student:</strong> struct 是定义结构体必备的前缀。student 是结构体标签。 struct student 可 以像 int、double、float 作为定义变量的数据类型。</p>\n<p>​\t\t**{} 内的变量：** 结构体就像个模板，能规定好里面填什么变量。</p>\n<p>​\t\t**student1：** 定义 struct student 类型的变量 .</p>\n<p><strong>typedef</strong></p>\n<p>​\t\t<strong>typedef</strong> 这是一个重命名的关键字</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//typedef + 数据类型 + 你想要重命名的英文</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">student</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> height;</span><br><span class=\"line\"><span class=\"keyword\">double</span> weight;</span><br><span class=\"line\"><span class=\"keyword\">char</span> name[<span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> score;</span><br><span class=\"line\">&#125;Stu;</span><br></pre></td></tr></table></figure>\n<p>​\t\ttypedef 在这段代码中将 stu 等效成了  <code>struct student ，而不是一个 struct student</code>  类型的变量。</p>\n<p>​\t\t<strong>结构体变量的初始化</strong></p>\n<p>​\t\t结构体也是一种数据类型，从某种程度上说与 int 等类似，属于同级，所以定义变量的方式也是一样的。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">truct Stu stu1,stu2; <span class=\"comment\">//这里定义了Stu类型的变量</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>结构体成员的赋值</strong></p>\n<p>​\t\t结构体成员的获取形式为：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">结构体变量名.成员名;</span><br></pre></td></tr></table></figure>\n<p>​\t\t<strong>示例：</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stu stu1;</span><br><span class=\"line\">stu1.height = <span class=\"number\">175</span>;</span><br><span class=\"line\">stu1.name = <span class=\"string\">&#x27;辰灏&#x27;</span>;</span><br><span class=\"line\">stu1.weight = <span class=\"number\">100.0</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;身高：%d,姓名：%s,体重：%lf\\n&quot;</span>,stu1.height,stu1.name,stu1.weight);</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体的使用\"><a class=\"markdownIt-Anchor\" href=\"#结构体的使用\">#</a> 结构体的使用</h2>\n<ul>\n<li>在结构体中使用数组</li>\n</ul>\n<p><strong>结构体中的成员变量可以是数组，没有什么特别的。</strong></p>\n<ul>\n<li>结构体与指针</li>\n</ul>\n<p><strong>结构体可以作为函数的参数传进子函数中，然后在子函数中使用.</strong></p>\n<p><strong>下面是一个输出函数</strong></p>\n<p><strong>Node 是一个结构体，print () 是一个子函数，这个子函数有一个 Node 类型的参数</strong></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(Stu *stu)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!p)</span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>,stu-&gt;height);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"链表\"><a class=\"markdownIt-Anchor\" href=\"#链表\">#</a> 链表</h2>\n<p>结构体变量指针</p>\n<ul>\n<li>结构体变量指向自身</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span>&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//在初始化时，变量next,会指向自身，所以在初始化变量时要把next指针置NULL。</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>指向其它结构变量</p>\n<p>​\t即将定义的两个结构体变量，比方说定义了 st1 和 st2 两个结构体变量，只需要将 st2 的地址 赋给 st1 的指针域，这样 st1 的指针就指向了 st2。</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"keyword\">char</span> c;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">strcut table st1 = &#123;<span class=\"number\">1</span>,<span class=\"string\">&#x27;a&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">table</span> <span class=\"title\">st2</span> =</span> &#123;<span class=\"number\">2</span>,<span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">st1.next = &amp;st2;</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态创建链表\"><a class=\"markdownIt-Anchor\" href=\"#动态创建链表\">#</a> 动态创建链表</h3>\n<ul>\n<li>\n<p>构造一个结构类型，此结构类型必须包含至少一个成员指针，此指针要指向此结构类型</p>\n</li>\n<li>\n<p>定义 3 个结构体类型的指针，按照用途可以命名为，p_head,p_rail,p_new</p>\n</li>\n<li>\n<p>动态生成新的结点，为各成员变量赋值，最后加到链表当中。</p>\n</li>\n<li>\n<p>动态创建的链表，没有一个单独的变量名去寻找到节点，全部都是由结构体中的 next 指针找 到下一个节点</p>\n</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">short</span> i; <span class=\"comment\">//数据域</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c; <span class=\"comment\">///数据域</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span> <span class=\"comment\">//指针域，用于指向下一个结点</span></span><br><span class=\"line\">&#125;Node;</span><br></pre></td></tr></table></figure>\n<p>​\t\t定义结构体指针，不一定要在 main 函数中定义</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node *p_head,*p_rail,*p_new ;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用malloc函数申请存储空间\"><a class=\"markdownIt-Anchor\" href=\"#使用malloc函数申请存储空间\">#</a> 使用 malloc 函数申请存储空间</h3>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p_head = (Node*)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>（struct node*) 强制类型转换</p>\n</li>\n<li>\n<p>malloc () 申请空间函数</p>\n</li>\n<li>\n<p>sizeof () 申请的大小函数 在使用完这个结构体以后可以使用函数</p>\n</li>\n<li>\n<p>free () 将申请的空间释放。</p>\n</li>\n</ul>\n<p>​\t示例：</p>\n<p>​\t\t构造结构体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">short</span> i;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> c;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> *<span class=\"title\">next</span>;</span></span><br><span class=\"line\">&#125;Node;</span><br><span class=\"line\"><span class=\"comment\">//定义变量</span></span><br><span class=\"line\">Node node1 = &#123;<span class=\"number\">1</span>,<span class=\"string\">&#x27;A&#x27;</span>&#125;;</span><br><span class=\"line\">Node node2 = &#123;<span class=\"number\">2</span>,<span class=\"string\">&#x27;B&#x27;</span>&#125;;</span><br><span class=\"line\">Node node3 = &#123;<span class=\"number\">3</span>,<span class=\"string\">&#x27;C&#x27;</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">//链表连接</span></span><br><span class=\"line\">node1.next = &amp;node2;</span><br><span class=\"line\">node2.next = &amp;node3;</span><br><span class=\"line\"><span class=\"comment\">//动态申请节点并添加到链表中</span></span><br><span class=\"line\">Node *p_new;</span><br><span class=\"line\">p_new = (Node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\">p_new-&gt;i = <span class=\"number\">4</span>;</span><br><span class=\"line\">p_new-&gt;c = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">node3.next = p_new;</span><br></pre></td></tr></table></figure>\n<h3 id=\"链表操作\"><a class=\"markdownIt-Anchor\" href=\"#链表操作\">#</a> 链表操作</h3>\n<p>插入</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/0bf521dd435c6a14.png\" alt=\"\"></p>\n<ul>\n<li>插入节点到头节点之前</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node p_new = (Node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node)); <span class=\"comment\">//创建新结点，并为其开辟空间</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%c&quot;</span>,&amp;(p_new-&gt;i),&amp;(p_new-&gt;c)); <span class=\"comment\">//录入结点数据</span></span><br><span class=\"line\"><span class=\"comment\">//插入节点</span></span><br><span class=\"line\">p_new-&gt;next = p_head;</span><br><span class=\"line\">p_head = p_new;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>插入节点到链表中间</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node *p_new = (Node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node)); <span class=\"comment\">//创建新结点，并为其开辟空间</span></span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%c&quot;</span>,&amp;(p_new-&gt;i),&amp;(p_new-&gt;c)); <span class=\"comment\">//录入结点数据</span></span><br><span class=\"line\">Node *p_front = p_head-&gt;next;</span><br><span class=\"line\">p_new-&gt;next = p_front-&gt;next;</span><br><span class=\"line\">p_front-&gt;next = p_new;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>插入节点到末尾</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(Node *p)</span></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span>(!p)&#123; <span class=\"comment\">//如果p是空的</span></span><br><span class=\"line\">p = (Node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%c&quot;</span>,&amp;(p-&gt;i),&amp;(p-&gt;c)); <span class=\"comment\">//录入结点数据</span></span><br><span class=\"line\">p-&gt;next = <span class=\"literal\">NULL</span>;<span class=\"comment\">//next节点置空</span></span><br><span class=\"line\"><span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Node p_loop = p;</span><br><span class=\"line\"><span class=\"keyword\">while</span>(p_loop)&#123;</span><br><span class=\"line\">p_loop = p_loop-&gt;next;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">p_new = (Node *)<span class=\"built_in\">malloc</span>(<span class=\"keyword\">sizeof</span>(Node));</span><br><span class=\"line\"><span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%c&quot;</span>,&amp;(p_new-&gt;i),&amp;(p_new-&gt;c)); <span class=\"comment\">//录入结点数据</span></span><br><span class=\"line\">p_new-&gt;next = <span class=\"literal\">NULL</span>;<span class=\"comment\">//next节点置空</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除某一位置节点</li>\n</ul>\n<p><img src=\"https://s3.bmp.ovh/imgs/2021/10/9c1b67676cb5017d.png\" alt=\"\"></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">del_list</span><span class=\"params\">(struct node *p_head,<span class=\"keyword\">int</span> pos)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tstrct node *p_front,*p_del;</span><br><span class=\"line\">\tp_front = p_head;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt;= pos - <span class=\"number\">1</span>;i ++)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\tp_front = p_front-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    p_del = p_front-&gt;next;</span><br><span class=\"line\">\tp_front-&gt;next = p_del-&gt;next;</span><br><span class=\"line\">\t<span class=\"built_in\">free</span>(p_del);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "学习"
            ]
        }
    ]
}